name: PR Slack Notification

on:
  pull_request:
    types: [opened]

jobs:
  wait_for_ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the Latest Successful CI Run (Max 10 min)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          CI_WORKFLOW_NAME="CI"
          REPO=${{ github.repository }}
          MAX_WAIT_TIME=600  # 10 minutes in seconds
          SLEEP_TIME=15       # Retry interval in seconds
          TIME_WAITED=0

          echo "üîÑ Waiting for the most recent successful CI run for PR #$PR_NUMBER (Max: 10 min)..."

          while [[ $TIME_WAITED -lt $MAX_WAIT_TIME ]]; do
            LATEST_CI_STATUS=$(gh run list --repo "$REPO" --json name,conclusion,event,headSha,updatedAt | jq -r '
              map(select(.name == "CI" and .event == "pull_request" and .conclusion == "success")) 
              | sort_by(.updatedAt) 
              | reverse 
              | .[0].conclusion')

            if [[ "$LATEST_CI_STATUS" == "success" ]]; then
              echo "‚úÖ Most recent successful CI run found! Sending Slack notification..."
              break
            elif [[ -z "$LATEST_CI_STATUS" || "$LATEST_CI_STATUS" == "null" ]]; then
              echo "‚è≥ No successful CI run yet... Retrying in $SLEEP_TIME seconds."
            else
              echo "‚ö†Ô∏è Unexpected CI status: $LATEST_CI_STATUS"
            fi

            sleep $SLEEP_TIME
            TIME_WAITED=$((TIME_WAITED + SLEEP_TIME))
          done

          if [[ $TIME_WAITED -ge $MAX_WAIT_TIME ]]; then
            echo "‚ö†Ô∏è No successful CI run found within 10 minutes. Exiting..."
            exit 1
          fi

      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": ":git: @backend Please review [PR #${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }}) by ${{ github.event.pull_request.user.login }}."
          }' $SLACK_WEBHOOK_URL
